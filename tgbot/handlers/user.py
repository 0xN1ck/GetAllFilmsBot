from aiogram.dispatcher.filters import Command
from aiogram import Dispatcher
from telebot.types import Message

from tgbot.keyboards.keyboard_button import menu
from aiogram.dispatcher import filters, FSMContext
from aiogram.types import CallbackQuery, Message
from typing import Union

from tgbot.keyboards.menu_keyboards import films_keyboard, translates_keyboard, menu_cd
from tgbot.misc.states import UserState

from tgbot.misc.films_module import get_info_film

# async def user_start(message: Message):
#     await message.reply("Hello, user!")

FORBIDDEN_PHRASE = [
    'üé¨',
    'üé•'
]


async def show_menu(message: Message):
    await message.reply("Hello, user!")
    await message.answer("–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞: ", reply_markup=menu)
    await UserState.Category.set()


async def set_category(message: Message, state: FSMContext):
    await state.update_data(category=message.text)
    async with state.proxy() as data:
        await message.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞–∑–¥–µ–ª {data["category"]}\n'
                             f'–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ {data["category"][2:-1].lower()}–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞')


async def show_results(message: Message, state: FSMContext):
    # await UserState.Film_name.set()
    await state.update_data(search=message.text)
    async with state.proxy() as data:
        if data["category"] == 'üé¨ –§–∏–ª—å–º—ã':
            await list_films(message, state)
        elif data["category"] == 'üé• –°–µ—Ä–∏–∞–ª—ã':
            print('later')


async def list_films(message: Union[CallbackQuery, Message], state: FSMContext, **kwargs):
    if isinstance(message, Message):
        markup = await films_keyboard(message, state)
        await message.answer(f"–í–æ—Ç, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –ø–æ –í–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É \n"
                             f"üîé<b> {message.text}</b>", reply_markup=markup)
    elif isinstance(message, CallbackQuery):
        call = message
        markup = await films_keyboard(call, state, current_page=int(call.data.split(":")[3]))
        await call.message.edit_reply_markup(markup)


async def list_translates(callback: CallbackQuery, kp_id, **kwargs):
    markup = await translates_keyboard(callback, kp_id)
    # await callback.message.delete()
    info = await get_info_film(token_kp=callback.bot.data['config'].token_kp, kp_id=kp_id)
    await callback.message.answer_photo(photo=info['photo'],
                                        caption=f"<i>–ù–∞–∑–≤–∞–Ω–∏–µ: </i ><b>{info['name']}</b>\n\n"
                                                f"{info['description']}\n\n"
                                                f"<i>–†–µ–π—Ç–∏–Ω–≥ –ö–∏–Ω–æ–ø–æ–∏—Å–∫:</i> <b>{info['rating_kp']}</b>\n"
                                                f"<i>–†–µ–π—Ç–∏–Ω–≥ IMDb:</i> <b>{info['rating_imdb']}</b>",
                                        reply_markup=markup)
    # –ò–∑–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ —Å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏


async def navigate(call: CallbackQuery, callback_data: dict, state: FSMContext):
    """

    :param state:
    :param call: –¢–∏–ø –æ–±—ä–µ–∫—Ç–∞ CallbackQuery, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–ª–µ—Ç–∞–µ—Ç –≤ —Ö–µ–Ω–¥–ª–µ—Ä
    :param callback_data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–µ
    """

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –º–µ–Ω—é, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    current_level = callback_data.get("level")

    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∫–æ—Ç–æ—Ä—É—é –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–ü–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤—Å–µ–≥–¥–∞)
    kp_id = callback_data.get("kp_id")

    translate_id = callback_data.get("translate_id")

    current_page = callback_data.get("current_page")

    levels = {
        "0": list_films,  # –û—Ç–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        "1": list_translates,  # –û—Ç–¥–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    }

    # –ó–∞–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
    current_level_function = levels[current_level]

    # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏ –ø–µ—Ä–µ–¥–∞–µ–º —Ç—É–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∏–∑ –∫–Ω–æ–ø–∫–∏
    await current_level_function(
        call,
        kp_id=kp_id,
        current_page=current_page,
        translate_id=translate_id,
        state=state,
    )


def register_user(dp: Dispatcher):
    dp.register_message_handler(show_menu, commands=['start'], state='*')
    # dp.register_message_handler(user_start, commands=["start"], state="*")
    dp.register_message_handler(set_category, filters.Text(startswith=FORBIDDEN_PHRASE, ignore_case=True),
                                state=UserState.Category)
    dp.register_message_handler(show_results, state=UserState.Category)
    dp.register_callback_query_handler(navigate, menu_cd.filter(), state=UserState.Category)
